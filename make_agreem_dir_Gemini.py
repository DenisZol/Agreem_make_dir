# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç: make_bank_letter_from_agreement_v6.py

–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å v5:
- –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ (–±–µ–∑ –ø–∞–ø–∫–∏ INPUT).
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: CASE_NUM –∏—â–µ—Ç—Å—è –Ω–µ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ,
  –∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–≤–µ—Ä—Ö—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
- –£–±—Ä–∞–Ω—ã input() –¥–ª—è –ø–∞—É–∑—ã –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.
- –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (move) –≤–º–µ—Å—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
"""
import os, re, shutil, datetime
from decimal import Decimal, InvalidOperation

try:
    import pdfplumber
    from docx import Document
    from docx.text.paragraph import Paragraph
    from docx.document import Document as DocumentObject
    from docx.table import _Cell
except Exception as e:
    raise SystemExit(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
CASE_NUM_PATTERN = re.compile(r"\b0+(\d{5,})\b")
CASE_NUM_FALLBACK_PATTERN = re.compile(r"\b\d{6,9}\b")
AMOUNT_PATTERNS = [
    re.compile(r"(?:amount of|USD|\$)\s*([0-9][0-9 ,.]*)", flags=re.IGNORECASE),
    re.compile(r"USD\s*\$?\s*([0-9][0-9 ,.]*)", flags=re.IGNORECASE),
]
NON_DIGITS_PATTERN = re.compile(r"[^\d\.]")
UA_PURPOSE_PATTERN = re.compile(r"—É –≤–∏–≥–ª—è–¥—ñ\s+([^.]+)\.", flags=re.IGNORECASE)
DATE_US_PATTERN = re.compile(r"\b(\d{1,2})/(\d{1,2})/(\d{4})\b")
GRANT_AGREEMENT_PATTERN = re.compile(r"Grant Agreement.*\.pdf", flags=re.IGNORECASE)

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ ua_date, with_thin_space_groups, find_amount, find_ua_purpose, max_date_us –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

UA_MONTHS_GEN = {
    1: "—Å—ñ—á–Ω—è", 2: "–ª—é—Ç–æ–≥–æ", 3: "–±–µ—Ä–µ–∑–Ω—è", 4: "–∫–≤—ñ—Ç–Ω—è",
    5: "—Ç—Ä–∞–≤–Ω—è", 6: "—á–µ—Ä–≤–Ω—è", 7: "–ª–∏–ø–Ω—è", 8: "—Å–µ—Ä–ø–Ω—è",
    9: "–≤–µ—Ä–µ—Å–Ω—è", 10: "–∂–æ–≤—Ç–Ω—è", 11: "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", 12: "–≥—Ä—É–¥–Ω—è",
}

def ua_date(dt: datetime.date) -> str:
    dd = f"{dt.day:02d}"
    return f"¬´{dd}¬ª {UA_MONTHS_GEN[dt.month]} {dt.year} —Ä–æ–∫—É"

def with_thin_space_groups(n: Decimal) -> str:
    return f"{n:,.2f}".replace(",", " ").replace(".", ".")

def find_case_num_in_crop(page) -> str | None:
    """–ò—â–µ—Ç –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."""
    # –û–±—Ä–µ–∑–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 100 –ø–∏–∫—Å–µ–ª–µ–π –ø–æ –≤—ã—Å–æ—Ç–µ)
    top_of_page = page.crop((0, 0, page.width, 100))
    text = top_of_page.extract_text(x_tolerance=1) or ""
    
    # –ò—â–µ–º –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª–µ–π
    m = CASE_NUM_PATTERN.search(text)
    if m:
        return m.group(1) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π
    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
    m2 = CASE_NUM_FALLBACK_PATTERN.search(text)
    return str(int(m2.group(0))) if m2 else None

def find_amount(text_first_page: str) -> Decimal | None:
    for pat in AMOUNT_PATTERNS:
        for m in pat.finditer(text_first_page):
            digits = NON_DIGITS_PATTERN.sub("", m.group(1))
            try:
                return Decimal(digits)
            except InvalidOperation:
                continue
    return None

def find_ua_purpose(full_text: str) -> str | None:
    m = UA_PURPOSE_PATTERN.search(full_text)
    return ("—É –≤–∏–≥–ª—è–¥—ñ " + m.group(1).strip()) if m else None

def max_date_us(text_last_page: str) -> datetime.date | None:
    dates = []
    for m in DATE_US_PATTERN.finditer(text_last_page):
        mm, dd, yyyy = map(int, m.groups())
        try:
            dates.append(datetime.date(yyyy, mm, dd))
        except ValueError:
            pass
    return max(dates) if dates else None

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ _replace_in_block, replace_placeholders –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def _replace_in_paragraph(paragraph: Paragraph, placeholders: dict):
    """Replace placeholders in a paragraph without recursion.

    All placeholders are processed in the order provided by ``placeholders``.
    The function correctly handles cases where a placeholder spans across
    several ``Run`` objects within the paragraph."""

    while True:
        full_text = "".join(run.text for run in paragraph.runs)
        replaced = False

        for key, value in placeholders.items():
            start_index = full_text.find(key)
            if start_index == -1:
                continue

            end_index = start_index + len(key)
            runs_to_modify = []
            current_pos = 0
            for run in paragraph.runs:
                run_len = len(run.text)
                if start_index < current_pos + run_len and current_pos < end_index:
                    runs_to_modify.append(run)
                current_pos += run_len

            if not runs_to_modify:
                continue

            first_run = runs_to_modify[0]
            last_run = runs_to_modify[-1]

            prefix = suffix = ""
            current_pos = 0
            for run in paragraph.runs:
                run_len = len(run.text)
                if run is first_run:
                    prefix = run.text[:start_index - current_pos]
                if run is last_run:
                    suffix = run.text[end_index - current_pos:]
                    break
                current_pos += run_len

            first_run.text = prefix + str(value)
            for r in runs_to_modify[1:]:
                r.text = ""

            if first_run is last_run:
                first_run.text += suffix
            else:
                last_run.text = suffix

            replaced = True
            break

        if not replaced:
            break

def _replace_in_block(block, placeholders: dict):
    for p in getattr(block, "paragraphs", []):
        _replace_in_paragraph(p, placeholders)
    for table in getattr(block, "tables", []):
        for row in table.rows:
            for cell in row.cells:
                _replace_in_block(cell, placeholders)

def replace_placeholders(doc: DocumentObject, placeholders: dict):
    _replace_in_block(doc, placeholders)
    for section in doc.sections:
        _replace_in_block(section.header, placeholders)
        _replace_in_block(section.footer, placeholders)

def process_file(pdf_path: str, template_path: str):
    base_dir = os.path.dirname(pdf_path)
    print(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {os.path.basename(pdf_path)}")

    with pdfplumber.open(pdf_path) as pdf:
        first_page = pdf.pages[0]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º CASE_NUM –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–∞–∫ –≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏
        case_num = find_case_num_in_crop(first_page)
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        first_page_text = first_page.extract_text(x_tolerance=1) or ""
        last_page_text = pdf.pages[-1].extract_text(x_tolerance=1) or ""
        full_text = "\n".join((p.extract_text(x_tolerance=1) or "") for p in pdf.pages)

    # –ò—â–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
    amount = find_amount(first_page_text)
    doc_date = max_date_us(last_page_text)
    case_descr = find_ua_purpose(full_text)

    errors = []
    if not case_num:
        errors.append("–Ω–µ –Ω–∞–π–¥–µ–Ω CASE_NUM")
    if amount is None:
        errors.append("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ (FULL_AMOUNT)")
    if not doc_date:
        errors.append("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ (DATE)")
    if not case_descr:
        print("‚ö†Ô∏è  CASE_DESCR –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ª–µ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º (–≤ —Ç–µ–∫—É—â–µ–º —à–∞–±–ª–æ–Ω–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).")

    if errors:
        print("‚õî " + "; ".join(errors) + f" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª {os.path.basename(pdf_path)}")
        print()
        return

    YY_MM = f"{doc_date.year % 100:02d}-{doc_date.month:02d}"
    FULL_AMOUNT_DEC = f"{int(amount):d}"
    FULL_AMOUNT_fmt = with_thin_space_groups(Decimal(f"{amount:.2f}"))

    DATE_uA = ua_date(doc_date)
    DATE_plus_2 = ua_date(doc_date + datetime.timedelta(days=2))
    DATE_plus_3 = ua_date(doc_date + datetime.timedelta(days=3))
    DATE_MM_ONLY = f"{doc_date.month:02d}"

    folder_name = f"{YY_MM} –ù–æ–≤–∞ –•–•–• {FULL_AMOUNT_DEC} ‚Ññ{case_num} –•–µ–ª–ø"
    out_dir = os.path.join(base_dir, folder_name)

    if os.path.exists(out_dir):
        print(f"‚Ü™Ô∏è –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        print()
        return

    os.makedirs(out_dir, exist_ok=True)

    doc = Document(template_path)
    placeholders = {
        "{{CASE_NUM}}": case_num,
        "{{FULL_AMOUNT_DEC}}": FULL_AMOUNT_DEC,
        "{{FULL_AMOUNT}}": str(FULL_AMOUNT_fmt),
        "{{DATE}}": DATE_uA,
        "{{DATE+2}}": DATE_plus_2,
        "{{DATE + 2}}": DATE_plus_2,
        "{{DATE+3}}": DATE_plus_3,
        "{{DATE + 3}}": DATE_plus_3,
        "{{DATE_MM_ONLY}}": DATE_MM_ONLY,
        "{{CASE_DESCR}}": case_descr or "",
    }
    replace_placeholders(doc, placeholders)

    out_docx = os.path.join(out_dir, f"–ü–∏—Å—å–º–æ_–≤_–±–∞–Ω–∫_‚Ññ{case_num}.docx")
    if os.path.exists(out_docx):
        print(f"‚Ü™Ô∏è Word —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(out_docx)} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
    else:
        doc.save(out_docx)
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {os.path.basename(out_docx)}")

    dst_pdf = os.path.join(out_dir, os.path.basename(pdf_path))
    if os.path.exists(dst_pdf):
        print(f"‚Ü™Ô∏è PDF —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ: {os.path.basename(dst_pdf)} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–Ω–æ—Å.")
    else:
        shutil.move(pdf_path, dst_pdf) # –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        print(f"üì¶ –ü–µ—Ä–µ–º–µ—â—ë–Ω PDF –≤: {folder_name}")

    print()

def main():
    cwd = os.path.dirname(os.path.abspath(__file__))
    template_path = os.path.join(cwd, "–ü–∏—Å—å–º–æ –Ω–∞ –ë–∞–Ω–∫ —à–∞–±–ª–æ–Ω.docx")

    if not os.path.exists(template_path):
        print("‚õî –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω '–ü–∏—Å—å–º–æ –Ω–∞ –ë–∞–Ω–∫ —à–∞–±–ª–æ–Ω.docx' —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")
        return

    files = [f for f in os.listdir(cwd) if GRANT_AGREEMENT_PATTERN.fullmatch(f)]
    if not files:
        print("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ –º–∞—Å–∫–µ 'Grant Agreement*.pdf' –≤ –ø–∞–ø–∫–µ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ PDF: {len(files)}")
    for name in files:
        try:
            process_file(os.path.join(cwd, name), template_path)
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {name}: {e}\n‚Äî –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É.")
            print()

if __name__ == "__main__":
    main()

